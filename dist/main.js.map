{"mappings":";;;;;;;AGAA;AAEA,SAAS,4BAAM,CAAO,IAAU,EAAhC;IACE,IAAM,QAAQ,GAAG,oBAAO,CAAC,WAAzB;QACE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,GAAG,EAAE,CAAC;QACpD,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;KACtB,EAAE,EAAE,CAAC,AAAC;IACD,IAAA,EAAA,GAAgB,qBAAQ,CAAC,QAAQ,CAAC,EAAjC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,MAAM,GAAA,EAAA,CAAA,CAAA,CAAsB,AAAC;IAEzC,IAAM,MAAM,GAAG,SAAT,MAAM,CAAI,GAAM,EAAtB;QACE,MAAM,CAAC,SAAC,IAAI,EAAZ;YACE,IAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,AAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ,AAAC;IAEF,IAAM,GAAG,GAAG,SAAN,GAAG,CAAI,GAAM,EAAE,KAAQ,EAA7B;QACE,MAAM,CAAC,SAAC,IAAI,EAAZ;YACE,IAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,AAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ,AAAC;IACF,IAAM,KAAK,GAAG,SAAR,KAAK,GAAX;QACE,MAAM,CAAC,SAAC,IAAI,EAAZ;YACE,IAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,AAAC;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;SACb,CAAC,CAAC;KACJ,AAAC;IAEF,IAAM,KAAK,GAAG,SAAR,KAAK,GAAG;QAAM,OAAA,MAAM,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;KAAA,AAAC;IAE9C,IAAM,GAAG,GAAG,SAAN,GAAG,CAAI,GAAM,EAAnB;QACE,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACrB,AAAC;IAEF,IAAM,IAAI,GAAG,oBAAO,CAAC,WAAA;QAAM,OAAA,GAAG,CAAC,IAAI,CAAA;KAAA,EAAE;QAAC,GAAG;KAAC,CAAC,AAAC;IAE5C,OAAO;QACL,GAAG;QACH;YACE,GAAG,EAAA,GAAA;YACH,MAAM,EAAA,MAAA;YACN,KAAK,EAAA,KAAA;YACL,KAAK,EAAA,KAAA;YACL,GAAG,EAAA,GAAA;YACH,IAAI,EAAA,IAAA;SACL;KACF,CAAC;CACH;IAED,wCAAsB,GAAP,4BAAM;;AFrDrB","sources":["src/index.ts","index.ts","src/hooks/useMap/index.tsx","index.tsx"],"sourcesContent":["import useMap from \"./hooks/useMap\";\n\nexport { useMap };\n",null,"import { useMemo, useState } from \"react\";\n\nfunction useMap<K, V>(init?: any) {\n  const intiData = useMemo(() => {\n    if (!init || !Array.isArray(init)) return new Map();\n    return new Map(init);\n  }, []);\n  const [map, setMap] = useState(intiData);\n\n  const remove = (key: K) => {\n    setMap((prev) => {\n      const temp = new Map(prev);\n      temp.delete(key);\n      return temp;\n    });\n  };\n\n  const set = (key: K, value: V) => {\n    setMap((prev) => {\n      const temp = new Map(prev);\n      temp.set(key, value);\n      return temp;\n    });\n  };\n  const clear = () => {\n    setMap((prev) => {\n      const temp = new Map(prev);\n      temp.clear();\n      return temp;\n    });\n  };\n\n  const reset = () => setMap(new Map(intiData));\n\n  const has = (key: K) => {\n    return map.has(key);\n  };\n\n  const size = useMemo(() => map.size, [map]);\n\n  return [\n    map,\n    {\n      set,\n      remove,\n      clear,\n      reset,\n      has,\n      size,\n    },\n  ];\n}\n\nexport default useMap;\n",null],"names":[],"version":3,"file":"main.js.map"}